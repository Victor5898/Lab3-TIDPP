#!groovy

pipeline
{
	agent any

	options 
	{
          	buildDiscarder(logRotator(numToKeepStr: '10'))
     	}

	parameters
	{
		booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: false, description: 'Delete folder created by Jenkins for current build if true')
		booleanParam(name: 'TESTING_FRONTEND', defaultValue: false , description: 'If true- execute front-end testing')
		
	}

	environment
	{
		 ON_SUCCESS_SEND_EMAIL = 'true'
		 ON_FAILURE_SEND_EMAIL = 'true'
	}
	
	stages()
	{
		stage("Build")
		{	
			steps
			{
				echo "Build number ${BUILD_NUMBER} with tag ${BUILD_TAG}"
					
				withEnv(["HOME=${env.WORKSPACE}"])
				{
					bat 'py -m venv .venv && ./venv/bin/activate && pip install -r requirements.txt && py -m py_compile manage.py && deactivate'
				}	
				script
				{
					if(params.CLEAN_WORKSPACE)
					{
						cleanWs()
					}
				}
			}
		}
		
		stage("Test back-end")
		{
			steps
			{
				bat '. ${BUILD_TAG}/bin/activate && py manage.py test --verbose --junit-xlm test-reports/test-result.xlm django_ledger/tests/test_* && deactivate'
				
				always
				{
					junit test-reports/test-result.xlm
				}
			}	
		}

		stage("Test front-end")
		{
			steps
			{
				script
				{
					if(params.TESTING_FRONTEND == 'true')
					{
						echo "Valoarea parametrului TESTING_FRONTEND este ${params.TESTING_FRONTEND}"
					}			
				}
			}
		}
		
		stage("Deployment")
		{
			steps
			{
				echo "Deployment step"
			}
			
		}
	}
}