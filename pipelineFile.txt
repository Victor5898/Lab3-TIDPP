#!groovy

pipeline
{
	agent any

	options 
	{
          	buildDiscarder(logRotator(numToKeepStr: '20'))
		timestamps()
     	}

	parameters
	{
		booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: false, description: 'Delete folder created by Jenkins for current build if true')
		booleanParam(name: 'TESTING_FRONTEND', defaultValue: false , description: 'If true- execute front-end testing')
		
	}

	environment
	{
		 ON_SUCCESS_SEND_EMAIL = 'true'
		 ON_FAILURE_SEND_EMAIL = 'true'
	}
	
	stages()
	{
		stage("Build")
		{	
			steps
			{
				echo "Build number ${BUILD_NUMBER} with tag ${BUILD_TAG}"
					
				sh 'python -m venv "${BUILD_TAG}" && \
                    		. ${BUILD_TAG}/Scripts/activate && \
				python -m pip install Pillow && \
                    		${BUILD_TAG}/Scripts/pip install -r requirements.txt && \
                    		python manage.py makemigrations && python manage.py migrate && \
				python -m py_compile manage.py && \
                    		deactivate'
			}
		}
		
		stage("Test back-end")
		{
			steps
			{
				sh '. ${BUILD_TAG}/Scripts/activate && py.test --junitxml=C:/ProgramData/Jenkins/.jenkins/workspace/Lab3-TIDPP/test-reports/test-report.xml && deactivate'
					
			}	
		}

		stage("Test front-end")
		{
			steps
			{
				script
				{
					if(params.TESTING_FRONTEND == 'true')
					{
						echo "Valoarea parametrului TESTING_FRONTEND este ${params.TESTING_FRONTEND}"
					}			
				}
			}
		}
		
		stage("Delivery")
		{
			steps
			{
				sh 'echo -e \
			       "# Dockerfile\n \
				FROM python:3.10.1-buster\n \
				ENV PYTHONDONTWRITEBYTECODE 1\n \
				ENV PYTHONUNBUFFERED 1\n \
				RUN mkdir /app\n \
				WORKDIR /app\n \
				RUN pip install --upgrade pip\n \
				CMD python -m venv ${BUILD_TAG}\n \
				COPY ${BUILD_TAG}/Scripts/activate /app/\n \
				CMD . /app/${BUILD_TAG}/Scripts/activate\n \
				COPY requirements.txt /app/\n \
				RUN pip install -r /app/requirements.txt\n \
				CMD ["python", "-m", "manage.py", "makemigrations"]\n \
				CMD ["python", "manage.py", "migrate"]\n \
				EXPOSE 8000\n \
				CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]" > Dockerfile';
				
				sh 'docker image rm victor435/python_app; \
				docker build -t victor435/python_app .; \
				docker login -u victor435 -p 1doi3patru5sase; \
				docker push victor435/python_app;'
			}
		}
		
		stage("Deployment")
		{
			steps
			{
				sshagent(credentials : ['jenkins'])
				{
					sh 'ssh -o StrictHostKeyChecking=no victor@192.168.100.82 uptime'
            				sh 'ssh -v victor@192.168.100.82'
            				sh 'docker-compose -d up'
				}
			}	
		}
	}

	post
	{
		always
		{
				
			junit '**/test-reports/*.xml'

			script
			{
				if(params.CLEAN_WORKSPACE)
				{
					cleanWs()
				}
			}
		}
		
		success
		{
			script
			{
				if(env.ON_SUCCESS_SEND_EMAIL)
				{
					echo "Sending email with job name: ${JOB_NAME}, build number: ${BUILD_NUMBER}, build url: ${BUILD_URL}"
					emailext(body: "Success build! job name: ${JOB_NAME}, build number: ${BUILD_NUMBER}, build url: ${BUILD_URL}", subject: 'Jenkins success build ${BUILD_NUMBER}', to: 'victorcovrig464@gmail.com')
					echo "Email send: build success"
				}
			}
		}

		failure
		{
			script
			{
				if(env.ON_FAILURE_SEND_EMAIL)
				{
					echo "Sending email with job name: ${JOB_NAME}, build number: ${BUILD_NUMBER}, build url: ${BUILD_URL}"
					emailext(body: "Build failed. Please fix it! job name: ${JOB_NAME}, build number: ${BUILD_NUMBER}, build url: ${BUILD_URL}", subject: 'Jenkins failed build ${BUILD_NUMBER}', to: 'victorcovrig464@gmail.com')
					echo "Email send: build failure"
				}
			}
			
		}	
	}	
}