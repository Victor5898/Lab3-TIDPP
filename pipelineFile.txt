#!groovy

pipeline
{
	agent any

	options 
	{
          	buildDiscarder(logRotator(numToKeepStr: '10'))
     	}

	parameters
	{
		booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: false, description: 'Delete folder created by Jenkins for current build if true')
		booleanParam(name: 'TESTING_FRONTEND', defaultValue: false , description: 'If true- execute front-end testing')
		
	}

	environment
	{
		 ON_SUCCESS_SEND_EMAIL = 'true'
		 ON_FAILURE_SEND_EMAIL = 'true'
	}
	
	stages()
	{
		stage("Build")
		{	
			steps
			{
				echo "Build number ${BUILD_NUMBER} with tag ${BUILD_TAG}"
					
				sh 'py -m venv "${BUILD_TAG}" && \
                    		. ${BUILD_TAG}/Scripts/activate && \
				py -m pip install Pillow && \
                    		${BUILD_TAG}/Scripts/pip install -r requirements.txt && \
                    		py manage.py makemigrations && py manage.py migrate && \
                    		deactivate'
			}
		}
		
		stage("Test back-end")
		{
			steps
			{
				sh '. ${BUILD_TAG}/Scripts/activate && py manage.py test && deactivate'
					
			}
			post
			{
				always
				{
					sh 'cd test-reports && touch test-report.xlm'
					junit testResults: '**/test-reports/*.xlm', skipPublishingChecks: true
				}
			}
				
		}

		stage("Test front-end")
		{
			steps
			{
				script
				{
					if(params.TESTING_FRONTEND == 'true')
					{
						echo "Valoarea parametrului TESTING_FRONTEND este ${params.TESTING_FRONTEND}"
					}			
				}
			}
		}
		
		stage("Deployment")
		{
			steps
			{
				echo "Deployment step"
			}
			
		}

		
	}

	post
	{
		always
		{
			script
			{
				if(params.CLEAN_WORKSPACE)
				{
					cleanWs()
				}
			}
		}
		
	}
}